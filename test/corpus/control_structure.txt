==================
if with one clause
==================
if(1 == 1, { "is true".postln; });
if(true, { "is true".postln; });

---
(source_file 
  (control_structure 
    (if 
      expression: (binary_expression 
        left: (literal 
          (number 
            (integer )))
        right: (literal 
          (number 
            (integer ))))
      true: (function_block 
        (function_call 
          (receiver 
            (literal 
              (string )))
          (instance_method_call 
            (method_name ))))))
  (control_structure 
    (if 
      expression: (literal 
        (bool ))
      true: (function_block 
        (function_call 
          (receiver 
            (literal 
              (string )))
          (instance_method_call 
            (method_name )))))))

==================
if with two clauses
==================
if(1 == 2, { "is true".postln; }, { 2; });
---
(source_file 
  (control_structure 
    (if 
      expression: (binary_expression 
        left: (literal 
          (number 
            (integer )))
        right: (literal 
          (number 
            (integer ))))
      true: (function_block 
        (function_call 
          (receiver 
            (literal 
              (string )))
          (instance_method_call 
            (method_name ))))
      false: (function_block 
        (literal 
          (number 
            (integer )))))))

==================
expr.if with two clauses
==================

true.if({ "hello".postln; }, { "no".postln; });
---
(source_file 
  (control_structure 
    (if 
      expression: (literal 
        (bool ))
      true: (function_block 
        (function_call 
          (receiver 
            (literal 
              (string )))
          (instance_method_call 
            (method_name ))))
      false: (function_block 
        (function_call 
          (receiver 
            (literal 
              (string )))
          (instance_method_call 
            (method_name)))))))

==================
expr.if with one clause
==================

true.if({ "hello".postln; });

---
(source_file 
  (control_structure 
    (if 
      expression: (literal 
        (bool ))
      true: (function_block 
        (function_call 
          (receiver 
            (literal 
              (string )))
          (instance_method_call 
            (method_name )))))))

==================
(expr).if with one clause
==================
(0 > 1).if({ "that can't be true!".postln; });

---
(source_file 
  (control_structure 
    (if 
      expression: (code_block 
        (binary_expression 
          left: (literal 
            (number 
              (integer )))
          right: (literal 
            (number 
              (integer )))))
      true: (function_block 
        (function_call 
          (receiver 
            (literal 
              (string )))
          (instance_method_call 
            (method_name )))))))


==================
while(func, func)
==================
while( {1 < 10;}, { "still counting".println;});

---
(source_file 
  (control_structure 
    (while 
      test_func: (function_block 
        (binary_expression 
          left: (literal 
            (number 
              (integer )))
          right: (literal 
            (number 
              (integer )))))
      body_func: (function_block 
        (function_call 
          (receiver 
            (literal 
              (string )))
          (instance_method_call 
            (method_name )))))))

==================
func.while{func}
==================
{1 < 10;}.while{ 
	"still counting".println; 
};

---
(source_file 
  (control_structure 
    (while 
      expression: (function_block 
        (binary_expression 
          left: (literal 
            (number 
              (integer )))
          right: (literal 
            (number 
              (integer )))))
      body_func: (function_block 
        (function_call 
          (receiver 
            (literal 
              (string )))
          (instance_method_call 
            (method_name )))))))

==================
for(start, end, func)
==================

for(1,10,{|i| i.postln});
---
(source_file 
  (control_structure 
    (for 
      (integer )
      (integer )
      (function_block 
        (parameter_list 
          (argument 
            (identifier )))
        (function_call 
          (receiver 
            (variable 
              (environment_var )))
          (instance_method_call 
            (method_name )))))))

==================
start.for(end, func)
==================
1.for(10,{|i| i.postln});
---
(source_file 
  (control_structure 
    (for 
      (integer )
      (integer )
      (function_block 
        (parameter_list 
          (argument 
            (identifier )))
        (function_call 
          (receiver 
            (variable 
              (environment_var )))
          (instance_method_call 
            (method_name )))))))

==================
start.forBy(end, step, func)
==================
1.forBy(2,10,{|i| i.postln});
---
(source_file 
  (control_structure 
    (forby 
      (integer)
      (integer)
      (integer)
      (function_block 
        (parameter_list 
          (argument 
            (identifier )))
        (function_call 
          (receiver 
            (variable 
              (environment_var )))
          (instance_method_call 
            (method_name )))))))

==================
forBy(start, end, step, func)
==================
1.forBy(2,10,{|i| i.postln});
---
(source_file 
  (control_structure 
    (forby 
      (integer )
      (integer )
      (integer )
      (function_block 
        (parameter_list 
          (argument 
            (identifier )))
        (function_call 
          (receiver 
            (variable 
              (environment_var )))
          (instance_method_call 
            (method_name )))))))

==================
case
==================
(
x = case
{ i == 1.5 } { \wrong }
{ true }   { \wrong }
{ i == 0 }   { \true };
)
---
(source_file 
  (code_block 
    (variable_definition 
      (variable 
        (environment_var ))
      (control_structure 
        (case 
          (function_block 
            (binary_expression 
              left: (variable 
                (environment_var ))
              right: (literal 
                (number 
                  (float )))))
          (function_block 
            (literal 
              (symbol 
                (identifier ))))
          (function_block 
            (literal 
              (bool )))
          (function_block 
            (literal 
              (symbol 
                (identifier ))))
          (function_block 
            (binary_expression 
              left: (variable 
                (environment_var ))
              right: (literal 
                (number 
                  (integer )))))
          (function_block 
            (literal 
              (symbol 
                (identifier )))))))))
