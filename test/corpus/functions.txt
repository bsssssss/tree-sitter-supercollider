=====================
class method prefixed class: ar(SinOsc, 110)
=====================
(
ar(SinOsc, 110);
)
---
(source_file (code_block (function_call (class_method_name) (parameter_call_list (argument_calls (unnamed_argument (class))) (argument_calls (unnamed_argument (literal (number (integer)))))))))

=====================
unfold argument list with *
=====================

(
	f = {|a1, a2, a3| [a1,a2,a3].postln};
	f.value(*[2,3,4])
)
---
(source_file 
  (code_block 
    (function_definition 
      name: (variable 
        (environment_var 
          name: (identifier )))
      value: (function_block 
        (parameter_list 
          (argument 
            name: (identifier ))
          (argument 
            name: (identifier ))
          (argument 
            name: (identifier )))
        (function_call 
          (receiver 
            (collection 
              (variable 
                (local_var 
                  name: (identifier )))
              (variable 
                (local_var 
                  name: (identifier )))
              (variable 
                (local_var 
                  name: (identifier )))))
          (instance_method_call 
            name: (method_name )))))
    (function_call 
      (receiver 
        (variable 
          (environment_var 
            name: (identifier ))))
      (instance_method_call 
        name: (method_name )
        (parameter_call_list 
          (argument_calls 
            (unnamed_argument 
              (unary_expression 
                right: (collection 
                  (literal 
                    (number 
                      (integer )))
                  (literal 
                    (number 
                      (integer )))
                  (literal 
                    (number 
                      (integer ))))))))))))

==================
arg with ...
==================
(
f = {arg ...args; };
e = {|...args| };
)
---
(source_file 
  (code_block 
    (function_definition 
      name: (variable 
        (environment_var 
          name: (identifier )))
      value: (function_block 
        (parameter_list 
          (argument 
            name: (identifier )))))
    (function_definition 
      name: (variable 
        (environment_var 
          name: (identifier )))
      value: (function_block 
        (parameter_list 
          (argument 
            name: (identifier )))))))

==================
function call in binary operator
==================
(
var sig = sig * EnvGen.kr(
	Env([0.0,1.0,1.0,0], [fadeIn, fadeOut], releaseNode: 2),  
	gate: killgate,  
	doneAction: 2
);
)
---
(source_file 
  (code_block 
    (variable_definition 
      name: (variable 
        (local_var 
          name: (identifier )))
      value: (binary_expression 
        left: (variable 
          (local_var 
            name: (identifier )))
        right: (function_call 
          (class )
          (class_method_call 
            name: (class_method_name ))
          (class_method_call 
            (parameter_call_list 
              (argument_calls 
                (unnamed_argument 
                  (function_call 
                    (class )
                    (class_method_call 
                      (parameter_call_list 
                        (argument_calls 
                          (unnamed_argument 
                            (collection 
                              (literal 
                                (number 
                                  (float )))
                              (literal 
                                (number 
                                  (float )))
                              (literal 
                                (number 
                                  (float )))
                              (literal 
                                (number 
                                  (integer ))))))
                        (argument_calls 
                          (unnamed_argument 
                            (collection 
                              (variable 
                                (local_var 
                                  name: (identifier )))
                              (variable 
                                (local_var 
                                  name: (identifier ))))))
                        (argument_calls 
                          (named_argument 
                            name: (identifier )
                            name: (literal 
                              (number 
                                (integer ))))))))))
              (argument_calls 
                (named_argument 
                  name: (identifier )
                  name: (variable 
                    (local_var 
                      name: (identifier )))))
              (argument_calls 
                (named_argument 
                  name: (identifier )
                  name: (literal 
                    (number 
                      (integer ))))))))))))

==================
instance variable setter method
==================
(
s.options.blockSize_(256);
)
---
(source_file 
  (code_block 
    (function_call 
      (receiver 
        (variable 
          (environment_var 
            name: (identifier ))))
      (instance_method_call 
        name: (method_name ))
      (instance_method_call 
        name: (method_name )
        (parameter_call_list 
          (argument_calls 
            (unnamed_argument 
              (literal 
                (number 
                  (integer ))))))))))

==================
class method call explicit
==================

(
s = Server.new;
)

---
(source_file 
  (code_block 
    (variable_definition 
      name: (variable 
        (environment_var 
          name: (identifier )))
      value: (function_call 
        (class )
        (class_method_call 
          name: (class_method_name ))))))

==================
simple function definition no arguments
==================
f = {};

---
(source_file 
  (function_definition 
    (variable 
      (environment_var (identifier)))
    (function_block )))

==================
Add two numbers in function with piped args
==================
f = {|oneArg=10, anotherArg=2| oneArg+anotherArg; };

---

(source_file 
  (function_definition 
    name: (variable 
      (environment_var name: (identifier)))
    value: (function_block 
      (parameter_list 
        (argument name:
          (identifier )
          value: (literal 
            (number 
              (integer ))))
        (argument 
          name: (identifier )
          value: (literal 
            (number 
              (integer )))))
      (binary_expression 
        left: (variable 
          (local_var name:
            (identifier )))
        right: (variable 
          (local_var name:
            (identifier )))))))
==================
Add two numbers in function with arg list
==================
f = {arg oneArg=10, anotherArg=2; oneArg+anotherArg; };

---

(source_file 
  (function_definition 
    name: (variable 
      (environment_var name: (identifier)))
    value: (function_block 
      (parameter_list 
        (argument 
          name: (identifier )
          value: (literal 
            (number 
              (integer ))))
        (argument 
          name: (identifier )
          value: (literal 
            (number 
              (integer )))))
      (binary_expression 
        left: (variable 
          (local_var 
            name: (identifier )))
        right: (variable 
          (local_var 
            name: (identifier )))))))

==================
Class method calls, explicit
==================
SinOsc.ar(freq: 441, mul:0.25);

---
(source_file 
  (function_call 
    (class )
    (class_method_call 
      (class_method_name ))
    (class_method_call 
      (parameter_call_list 
        (argument_calls 
          (named_argument 
            (identifier )
            (literal 
              (number 
                (integer )))))
        (argument_calls 
          (named_argument 
            (identifier )
            (literal 
              (number 
                (float )))))))))

==================
Class method calls, implicit
==================

Synth();
Synth(1,3,2);

---
(source_file 

(function_call 
	 (class )
	 (class_method_call ))

  (function_call 
    (class )
    (class_method_call 
      (parameter_call_list 
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (integer )))))
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (integer )))))
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (integer )))))))))

==================
Instance method (linlin on a float)
==================
0.5.linlin(0.0,1.0,1.0,10.0);
---
(source_file 
  (function_call 
    (receiver 
      (literal 
        (number 
          (float ))))
    (instance_method_call 
      (method_name )
      (parameter_call_list 
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (float )))))
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (float )))))
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (float )))))
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (float)))))))))

==================
instance method call with function as argument
==================
f = {|arg1|};
f.value(arg1: { "hej".postln; });
---
(source_file 
  (function_definition 
    (variable 
      (environment_var (identifier)))
    (function_block 
      (parameter_list 
        (argument 
          (identifier )))))
  (function_call 
    (receiver 
      (variable 
        (environment_var (identifier))))
    (instance_method_call 
      (method_name )
      (parameter_call_list 
        (argument_calls 
          (named_argument 
            (identifier )
            (function_block 
              (function_call 
                (receiver 
                  (literal 
                    (string )))
                (instance_method_call 
                  (method_name ))))))))))

==================
instance method call with collection as argument
==================
f = {|arg1|};
f.value(arg1: #[1,2,3]);
---
(source_file 
  (function_definition 
    (variable 
      (environment_var (identifier)))
    (function_block 
      (parameter_list 
        (argument 
          (identifier )))))
  (function_call 
    (receiver 
      (variable 
        (environment_var (identifier))))
    (instance_method_call 
      (method_name )
      (parameter_call_list 
        (argument_calls 
          (named_argument 
            (identifier )
            (collection 
              (literal 
                (number 
                  (integer )))
              (literal 
                (number 
                  (integer )))
              (literal 
                (number 
                  (integer ))))))))))

==================
instance method call with string as argument
==================
f = {|arg1|};
f.value(arg1: "hejhje hej");
---
(source_file 
  (function_definition 
    (variable 
      (environment_var (identifier)))
    (function_block 
      (parameter_list 
        (argument 
          (identifier )))))
  (function_call 
    (receiver 
      (variable 
        (environment_var (identifier))))
    (instance_method_call 
      (method_name )
      (parameter_call_list 
        (argument_calls 
          (named_argument 
            (identifier )
            (literal 
              (string ))))))))

==================
instance method call with symbol as argument
==================
f = {|arg1|};
f.value(arg1: \hej);
---
(source_file 
  (function_definition 
    (variable 
      (environment_var (identifier)))
    (function_block 
      (parameter_list 
        (argument 
          (identifier )))))
  (function_call 
    (receiver 
      (variable 
        (environment_var (identifier))))
    (instance_method_call 
      (method_name )
      (parameter_call_list 
        (argument_calls 
          (named_argument 
            (identifier )
            (literal 
              (symbol (identifier) ))))))))

==================
chained instance methods on literal
==================
"Hej % and %".format(20, 33).postln;
---
(source_file 
  (function_call 
    (receiver 
      (literal 
        (string )))
    (instance_method_call 
      (method_name )
      (parameter_call_list 
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (integer )))))
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (integer )))))))
    (instance_method_call 
      (method_name ))))

==================
chained instance methods on env var
==================
a = 10;
a.pow(2).nextPowerOfThree;
---
(source_file 
  (variable_definition 
    (variable 
      (environment_var (identifier)))
    (literal 
      (number 
        (integer ))))
  (function_call 
    (receiver 
      (variable 
        (environment_var (identifier))))
    (instance_method_call 
      (method_name )
      (parameter_call_list 
        (argument_calls 
          (unnamed_argument 
            (literal 
              (number 
                (integer )))))))
    (instance_method_call 
      (method_name ))))
